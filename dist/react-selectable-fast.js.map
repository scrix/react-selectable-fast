{"version":3,"sources":["webpack://React-Selectable-Fast/webpack/universalModuleDefinition","webpack://React-Selectable-Fast/webpack/bootstrap","webpack://React-Selectable-Fast/external {\"root\":\"React\",\"commonjs2\":\"react\",\"commonjs\":\"react\",\"amd\":\"react\"}","webpack://React-Selectable-Fast/./src/utils/castTouchToMouseEvent.ts","webpack://React-Selectable-Fast/./src/utils/detectMouseButton.ts","webpack://React-Selectable-Fast/./src/utils/getBoundsForNode.ts","webpack://React-Selectable-Fast/./src/utils/doObjectsCollide.ts","webpack://React-Selectable-Fast/./src/utils/nodeInRoot.ts","webpack://React-Selectable-Fast/./src/utils/index.ts","webpack://React-Selectable-Fast/./src/Context.ts","webpack://React-Selectable-Fast/./src/Selectbox.tsx","webpack://React-Selectable-Fast/./src/SelectableGroup.tsx","webpack://React-Selectable-Fast/./src/CreateSelectable.tsx","webpack://React-Selectable-Fast/./src/SelectAll.tsx","webpack://React-Selectable-Fast/./src/DeselectAll.tsx","webpack://React-Selectable-Fast/./src/index.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","propertiesToNormalize","patchEventProperties","evt","touchKey","forEach","castTouchToMouseEvent","type","includes","err","alert","message","detectMouseButton","buttonNumber","options","metaKey","allowMetaClick","ctrlKey","allowCtrlClick","altKey","allowAltClick","shiftKey","allowShiftClick","buttons","which","button","getDocumentScroll","documentScrollTop","Math","max","pageYOffset","document","documentElement","scrollTop","body","documentScrollLeft","pageXOffset","scrollLeft","getBoundsForNode","node","containerScroll","rect","getClientRects","rects","length","push","top","left","offsetWidth","offsetHeight","width","height","areBoundsCollide","a","b","tolerance","useOffsetSize","aHeight","bHeight","aWidth","bWidth","doObjectsCollide","delta","aObj","HTMLElement","bObj","isNodeInRoot","parentNode","noop","SelectableGroupContext","React","createContext","selectable","register","_","unregister","selectAll","clearSelection","getScrolledContainer","Selectbox","y","x","isSelecting","selectbox","ref","this","props","fixedPosition","className","boxStyle","state","zIndex","position","cursor","getSelectboxRef","style","Component","SelectableGroup","selectionMode","selectboxY","selectboxX","target","Set","Map","ignoreList","concat","scrollContainer","registry","values","registerSelectable","selectableItem","add","isSelected","selectedItems","isHandled","has","selectingItems","onSelectionFinish","checkScrollTop","clientY","checkScrollBottom","checkScrollLeft","clientX","checkScrollRight","offset","minimumSpeedFactor","scrollSpeed","currentTop","scrollBounds","getScrollStep","bottom","innerHeight","newTop","min","maxScrollTop","currentLeft","newLeft","right","innerWidth","maxScrollLeft","event","updateContainerScroll","mouseMoveStarted","mouseMoved","mouseDownData","pointY","pointX","setState","abs","updateSelecting","duringSelection","selectboxNode","getRef","selectboxBounds","selectItems","enableDeselect","mixedDeselect","item","processItem","isFromClick","onSelectionClear","updateWhiteListNodes","isInIgnoreList","e","isNotLeftButtonClick","mouseDownStarted","disabled","resetOnStart","mouseUpStarted","globalMouse","selectableGroup","offsetData","pageY","pageX","updateRootBounds","updateRegistry","preventDefault","addEventListener","updateSelectBox","mouseUp","removeTempEventListeners","handleClick","clear","preventEvent","toggleSelectionMode","cleanUp","keyCode","unregisterSelectable","querySelector","mouseDown","deselectOnEsc","keyListener","removeEventListener","getBoundingClientRect","scrollHeight","clientHeight","scrollWidth","clientWidth","size","isCollided","bounds","clickedItem","selectionStarted","deselected","deselectionStarted","canSelect","undefined","ignoreCheckCache","shouldBeIgnored","ignoreListNodes","some","ignoredNode","contains","set","Array","from","querySelectorAll","join","preventHandler","stopPropagation","selectOnClick","clickClassName","allowClickWithoutSelected","classNames","classList","isMouseUpOnClickElement","indexOf","component","GroupComponent","selectionModeClass","selectboxClassName","children","Provider","contextValue","getGroupRef","assign","defaultContainerStyle","createSelectable","WrappedComponent","context","selectableRef","getSelectableRef","SelectAllButton","ButtonComponent","rest","getRootRef","onClick","DeselectAllButton"],"mappings":"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","file":"react-selectable-fast.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"React-Selectable-Fast\"] = factory(require(\"react\"));\n\telse\n\t\troot[\"React-Selectable-Fast\"] = factory(root[\"React\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import { MouseEvent } from 'react'\r\n\r\nconst propertiesToNormalize = ['pageX', 'pageY', 'clientX', 'clientY']\r\n\r\nfunction patchEventProperties(evt: any, touchKey: string) {\r\n  propertiesToNormalize.forEach(key => {\r\n    if (typeof evt[key] === 'undefined') {\r\n      evt[key] = evt[touchKey][0][key]\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Used to return event object with desktop (non-touch) format of event\r\n * coordinates, regardless of whether the action is from mobile or desktop.\r\n */\r\nexport function castTouchToMouseEvent(evt: any): MouseEvent<HTMLElement> {\r\n  if (evt.type.includes('mouse')) {\r\n    return evt\r\n  }\r\n\r\n  try {\r\n    if (evt.type === 'touchstart') {\r\n      patchEventProperties(evt, 'targetTouches')\r\n    } else if (evt.type === 'touchmove') {\r\n      patchEventProperties(evt, 'changedTouches')\r\n    }\r\n  } catch (err) {\r\n    alert(err.message)\r\n  }\r\n\r\n  return evt as MouseEvent<HTMLElement>\r\n}\r\n","import { MouseEvent } from 'react'\r\n\r\ntype TDetectMouseButtonOptions = {\r\n  allowAltClick?: Boolean\r\n  allowCtrlClick?: Boolean\r\n  allowMetaClick?: Boolean\r\n  allowShiftClick?: Boolean\r\n}\r\n\r\n/**\r\n * @buttonNumber\r\n * 1: Left button\r\n * 2: Middle/Right button\r\n * 3: Right/Back button\r\n */\r\nexport function detectMouseButton(\r\n  evt: MouseEvent<HTMLElement>,\r\n  buttonNumber = 1,\r\n  options: TDetectMouseButtonOptions = {}\r\n) {\r\n  if (\r\n    (evt.metaKey && !options.allowMetaClick) ||\r\n    (evt.ctrlKey && !options.allowCtrlClick) ||\r\n    (evt.altKey && !options.allowAltClick) ||\r\n    (evt.shiftKey && !options.allowShiftClick)\r\n  ) {\r\n    return false\r\n  }\r\n\r\n  if ('buttons' in evt) {\r\n    return evt.buttons === buttonNumber\r\n  }\r\n\r\n  if ('which' in evt) {\r\n    return (evt as KeyboardEvent).which === buttonNumber\r\n  }\r\n\r\n  return (evt as MouseEvent).button === buttonNumber - 1\r\n}\r\n","export type TGetBoundsForNodeArgs = {\r\n  scrollTop: number\r\n  scrollLeft: number\r\n}\r\n\r\nexport type TComputedBounds = {\r\n  top: number\r\n  left: number\r\n  width: number\r\n  height: number\r\n  offsetWidth: number\r\n  offsetHeight: number\r\n}\r\n\r\nexport function getDocumentScroll() {\r\n  const documentScrollTop = Math.max(\r\n    window.pageYOffset,\r\n    document.documentElement.scrollTop,\r\n    document.body.scrollTop\r\n  )\r\n\r\n  const documentScrollLeft = Math.max(\r\n    window.pageXOffset,\r\n    document.documentElement.scrollLeft,\r\n    document.body.scrollLeft\r\n  )\r\n\r\n  return { documentScrollTop, documentScrollLeft }\r\n}\r\n\r\n/**\r\n * Given a node, get everything needed to calculate its boundaries\r\n */\r\nexport function getBoundsForNode(\r\n  node: HTMLElement,\r\n  containerScroll: TGetBoundsForNodeArgs = { scrollTop: 0, scrollLeft: 0 }\r\n) {\r\n  const { scrollTop, scrollLeft } = containerScroll\r\n  const { documentScrollTop, documentScrollLeft } = getDocumentScroll()\r\n\r\n  var rect = node.getClientRects();\r\n  const rects = [];\r\n  for (let i = 0; i < rect.length; i += 1) {\r\n      rects.push(\r\n          {\r\n              top: rect[i].top + documentScrollTop + scrollTop,\r\n              left: rect[i].left + documentScrollLeft + scrollLeft,\r\n              offsetWidth: node.offsetWidth,\r\n              offsetHeight: node.offsetHeight,\r\n              width: rect[i].width,\r\n              height: rect[i].height\r\n          } \r\n      )\r\n  };\r\n  return rects;\r\n}\r\n","import { getBoundsForNode, TComputedBounds } from './getBoundsForNode'\r\n\r\ntype TAreBoundsCollideOptions = {\r\n  tolerance?: number\r\n  useOffsetSize?: boolean\r\n}\r\n\r\n/**\r\n * Given offsets, widths, and heights of two objects, determine if they collide (overlap).\r\n */\r\nconst areBoundsCollide = (\r\n  a: TComputedBounds,\r\n  b: TComputedBounds,\r\n  { tolerance = 0, useOffsetSize = false }: TAreBoundsCollideOptions\r\n) => {\r\n  const aHeight = useOffsetSize ? a.offsetHeight : a.height\r\n  const bHeight = useOffsetSize ? b.offsetHeight : b.height\r\n\r\n  const aWidth = useOffsetSize ? a.offsetWidth : a.width\r\n  const bWidth = useOffsetSize ? b.offsetWidth : b.width\r\n\r\n  return !(\r\n    a.top + aHeight - tolerance < b.top ||\r\n    // 'a' top doesn't touch 'b' bottom\r\n    a.top + tolerance > b.top + bHeight ||\r\n    // 'a' right doesn't touch 'b' left\r\n    a.left + aWidth - tolerance < b.left ||\r\n    // 'a' left doesn't touch 'b' right\r\n    a.left + tolerance > b.left + bWidth\r\n  )\r\n}\r\n\r\n/**\r\n * Given two objects containing \"top\", \"left\", \"offsetWidth\" and \"offsetHeight\"\r\n * properties, determine if they collide.\r\n */\r\nexport function doObjectsCollide(\r\n  a: HTMLElement | TComputedBounds,\r\n  b: HTMLElement | TComputedBounds,\r\n  tolerance: number = 0,\r\n  delta: number = 1\r\n) {\r\n  const aObj = a instanceof HTMLElement ? getBoundsForNode(a) : a\r\n  const bObj = b instanceof HTMLElement ? getBoundsForNode(b) : b\r\n\r\n  return areBoundsCollide(aObj, bObj, { tolerance, useOffsetSize: delta === 1 })\r\n}\r\n","export function isNodeInRoot(node: HTMLElement, root: HTMLElement) {\r\n  while (node) {\r\n    if (node === root) {\r\n      return true\r\n    }\r\n\r\n    node = node.parentNode as any\r\n  }\r\n\r\n  return false\r\n}\r\n","export const noop = () => {}\r\nexport type Maybe<T> = T | null\r\n\r\nexport * from './castTouchToMouseEvent'\r\nexport * from './detectMouseButton'\r\nexport * from './doObjectsCollide'\r\nexport * from './getBoundsForNode'\r\nexport * from './nodeInRoot'\r\n","import React from 'react'\r\n\r\nimport { TSelectableGroupContext, TSelectableItem } from './Selectable.types'\r\nimport { noop } from './utils'\r\n\r\nconst SelectableGroupContext = React.createContext<TSelectableGroupContext>({\r\n  selectable: {\r\n    register(_: TSelectableItem) {},\r\n    unregister(_: TSelectableItem) {},\r\n    selectAll: noop,\r\n    clearSelection: noop,\r\n    getScrolledContainer: () => null\r\n  }\r\n})\r\n\r\nexport default SelectableGroupContext\r\n","import React, { Component, CSSProperties } from 'react'\r\n\r\ntype TSelectboxProps = {\r\n  fixedPosition: boolean\r\n  className: string\r\n}\r\n\r\nclass Selectbox extends Component<TSelectboxProps> {\r\n  static defaultProps = {\r\n    className: 'selectable-selectbox'\r\n  }\r\n\r\n  state = {\r\n    y: 0,\r\n    x: 0,\r\n    width: 0,\r\n    height: 0,\r\n    isSelecting: false\r\n  }\r\n\r\n  selectbox: HTMLDivElement | null = null\r\n\r\n  getRef = () => this.selectbox\r\n\r\n  getSelectboxRef = (ref: HTMLDivElement | null) => {\r\n    this.selectbox = ref\r\n  }\r\n\r\n  render() {\r\n    const { fixedPosition, className } = this.props\r\n\r\n    const boxStyle: CSSProperties = {\r\n      left: this.state.x,\r\n      top: this.state.y,\r\n      width: this.state.width,\r\n      height: this.state.height,\r\n      zIndex: 9000,\r\n      position: fixedPosition ? 'fixed' : 'absolute',\r\n      cursor: 'default'\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {this.state.isSelecting && (\r\n          <div ref={this.getSelectboxRef} style={boxStyle} className={className} />\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Selectbox\r\n","import React, { Component, MouseEvent } from 'react'\r\nimport { ReactComponentLike } from 'prop-types'\r\n\r\nimport {\r\n  castTouchToMouseEvent,\r\n  detectMouseButton,\r\n  doObjectsCollide,\r\n  getBoundsForNode,\r\n  isNodeInRoot,\r\n  noop,\r\n  Maybe,\r\n  TComputedBounds\r\n} from './utils'\r\nimport { TSelectableItem } from './Selectable.types'\r\nimport SelectableGroupContext from './Context'\r\nimport Selectbox from './Selectbox'\r\n\r\ntype TSelectItemsOptions = {\r\n  isFromClick?: boolean\r\n}\r\n\r\ntype TMouseDownData = {\r\n  selectboxY: number\r\n  selectboxX: number\r\n  target: HTMLElement | null\r\n}\r\n\r\ntype TProcessItemOptions = TSelectItemsOptions & {\r\n  item: TSelectableItem\r\n  tolerance: number\r\n  selectboxBounds: TComputedBounds\r\n  enableDeselect: boolean\r\n  mixedDeselect: boolean\r\n}\r\n\r\nexport type TSelectableGroupProps = {\r\n  globalMouse?: boolean\r\n  ignoreList?: string[]\r\n  scrollSpeed?: number\r\n  minimumSpeedFactor?: number\r\n  allowClickWithoutSelected?: boolean\r\n  className?: string\r\n  clickClassName?: string\r\n  selectboxClassName?: string\r\n  style?: object\r\n  selectionModeClass?: string\r\n  onSelectionClear?: Function\r\n  enableDeselect?: boolean\r\n  mixedDeselect?: boolean\r\n  deselectOnEsc?: boolean\r\n  resetOnStart?: boolean\r\n  disabled?: boolean\r\n  delta?: number\r\n  allowAltClick?: boolean\r\n  allowCtrlClick?: boolean\r\n  allowMetaClick?: boolean\r\n  allowShiftClick?: boolean\r\n  selectOnClick?: boolean\r\n  /**\r\n   * Scroll container selector\r\n   */\r\n  scrollContainer?: string\r\n\r\n  /**\r\n   * Event that will fire rapidly during selection (while the selector is\r\n   * being dragged). Passes an array of keys.\r\n   */\r\n  duringSelection?: Function\r\n\r\n  /**\r\n   * Event that will fire when items are selected. Passes an array of keys.\r\n   */\r\n  onSelectionFinish?: Function\r\n\r\n  /**\r\n   * The component that will represent the Selectable DOM node\r\n   */\r\n  component?: ReactComponentLike\r\n\r\n  /**\r\n   * Amount of forgiveness an item will offer to the selectbox before registering\r\n   * a selection, i.e. if only 1px of the item is in the selection, it shouldn't be\r\n   * included.\r\n   */\r\n  tolerance?: number\r\n\r\n  /**\r\n   * In some cases, it the bounding box may need fixed positioning, if your layout\r\n   * is relying on fixed positioned elements, for instance.\r\n   * @type boolean\r\n   */\r\n  fixedPosition?: boolean\r\n}\r\n\r\nclass SelectableGroup extends Component<TSelectableGroupProps> {\r\n  static defaultProps = {\r\n    clickClassName: '',\r\n    tolerance: 0,\r\n    globalMouse: false,\r\n    ignoreList: [],\r\n    scrollSpeed: 0.25,\r\n    minimumSpeedFactor: 60,\r\n    duringSelection: noop,\r\n    onSelectionFinish: noop,\r\n    onSelectionClear: noop,\r\n    allowClickWithoutSelected: true,\r\n    selectionModeClass: 'in-selection-mode',\r\n    resetOnStart: false,\r\n    disabled: false,\r\n    deselectOnEsc: true,\r\n    fixedPosition: false,\r\n    delta: 1,\r\n    allowAltClick: false,\r\n    allowCtrlClick: false,\r\n    allowMetaClick: false,\r\n    allowShiftClick: false,\r\n    selectOnClick: true\r\n  }\r\n\r\n  state = { selectionMode: false }\r\n\r\n  mouseDownStarted = false\r\n  mouseMoveStarted = false\r\n  mouseMoved = false\r\n  mouseUpStarted = false\r\n  selectionStarted = false\r\n  deselectionStarted = false\r\n  clickedItem?: TSelectableItem\r\n  mouseDownData: TMouseDownData = {\r\n    selectboxY: 0,\r\n    selectboxX: 0,\r\n    target: null\r\n  }\r\n\r\n  registry = new Set<TSelectableItem>()\r\n  selectedItems = new Set<TSelectableItem>()\r\n  selectingItems = new Set<TSelectableItem>()\r\n  ignoreCheckCache = new Map<HTMLElement, Boolean>()\r\n  ignoreList = this.props.ignoreList!.concat(['.selectable-select-all', '.selectable-deselect-all'])\r\n  ignoreListNodes: HTMLElement[] = []\r\n\r\n  selectbox: Maybe<Selectbox> = null\r\n  selectableGroup: Maybe<HTMLElement> = null\r\n  scrollContainer: Maybe<HTMLElement> = null\r\n\r\n  maxScrollTop: number = 0\r\n  maxScrollLeft: number = 0\r\n  scrollBounds: Maybe<DOMRect | ClientRect> = null\r\n\r\n  componentDidMount() {\r\n    if (this.props.scrollContainer) {\r\n      this.scrollContainer = document.querySelector(this.props.scrollContainer)\r\n    } else {\r\n      this.scrollContainer = this.selectableGroup\r\n    }\r\n\r\n    this.selectableGroup!.addEventListener('mousedown', this.mouseDown)\r\n    this.selectableGroup!.addEventListener('touchstart', this.mouseDown)\r\n\r\n    if (this.props.deselectOnEsc) {\r\n      document.addEventListener('keydown', this.keyListener)\r\n      document.addEventListener('keyup', this.keyListener)\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.selectableGroup!.removeEventListener('mousedown', this.mouseDown)\r\n    this.selectableGroup!.removeEventListener('touchstart', this.mouseDown)\r\n\r\n    if (this.props.deselectOnEsc) {\r\n      document.removeEventListener('keydown', this.keyListener)\r\n      document.removeEventListener('keyup', this.keyListener)\r\n    }\r\n\r\n    this.removeTempEventListeners()\r\n  }\r\n\r\n  removeTempEventListeners() {\r\n    document.removeEventListener('mousemove', this.updateSelectBox)\r\n    document.removeEventListener('touchmove', this.updateSelectBox)\r\n    document.removeEventListener('mouseup', this.mouseUp)\r\n    document.removeEventListener('touchend', this.mouseUp)\r\n  }\r\n\r\n  updateRootBounds() {\r\n    this.scrollBounds = this.scrollContainer!.getBoundingClientRect()\r\n    this.maxScrollTop = this.scrollContainer!.scrollHeight - this.scrollContainer!.clientHeight\r\n    this.maxScrollLeft = this.scrollContainer!.scrollWidth - this.scrollContainer!.clientWidth\r\n  }\r\n\r\n  updateRegistry = () => {\r\n    const containerScroll = {\r\n      scrollTop: this.scrollContainer!.scrollTop,\r\n      scrollLeft: this.scrollContainer!.scrollLeft\r\n    }\r\n\r\n    for (const selectableItem of this.registry.values()) {\r\n      selectableItem.registerSelectable(containerScroll)\r\n    }\r\n  }\r\n\r\n  registerSelectable = (selectableItem: TSelectableItem) => {\r\n    this.registry.add(selectableItem)\r\n    if (selectableItem.state.isSelected) {\r\n      this.selectedItems.add(selectableItem)\r\n    }\r\n  }\r\n\r\n  unregisterSelectable = (selectableItem: TSelectableItem) => {\r\n    this.registry.delete(selectableItem)\r\n\r\n    const isHandled =\r\n      this.selectedItems.has(selectableItem) || this.selectingItems.has(selectableItem)\r\n\r\n    this.selectedItems.delete(selectableItem)\r\n    this.selectingItems.delete(selectableItem)\r\n\r\n    if (isHandled) {\r\n      // Notify third-party dev that component did unmount and handled item probably should be deleted\r\n      this.props.onSelectionFinish!([...this.selectedItems])\r\n    }\r\n  }\r\n\r\n  toggleSelectionMode() {\r\n    const {\r\n      selectedItems,\r\n      state: { selectionMode }\r\n    } = this\r\n\r\n    if (selectedItems.size && !selectionMode) {\r\n      this.setState({ selectionMode: true })\r\n    }\r\n    if (!selectedItems.size && selectionMode) {\r\n      this.setState({ selectionMode: false })\r\n    }\r\n  }\r\n\r\n  private updateContainerScroll = (evt: MouseEvent<HTMLElement>) => {\r\n    const { scrollTop, scrollLeft } = this.scrollContainer!\r\n\r\n    this.checkScrollTop(evt.clientY, scrollTop)\r\n    this.checkScrollBottom(evt.clientY, scrollTop)\r\n    this.checkScrollLeft(evt.clientX, scrollLeft)\r\n    this.checkScrollRight(evt.clientX, scrollLeft)\r\n  }\r\n\r\n  getScrollStep = (offset: number) => {\r\n    const { minimumSpeedFactor, scrollSpeed } = this.props\r\n\r\n    return Math.max(offset, minimumSpeedFactor!) * scrollSpeed!\r\n  }\r\n\r\n  checkScrollTop = (clientY: number, currentTop: number) => {\r\n    const offset = this.scrollBounds!.top - clientY\r\n\r\n    if (offset > 0 || clientY < 0) {\r\n      this.scrollContainer!.scrollTop = currentTop - this.getScrollStep(offset)\r\n    }\r\n  }\r\n\r\n  checkScrollBottom = (clientY: number, currentTop: number) => {\r\n    const offset = clientY - this.scrollBounds!.bottom\r\n\r\n    if (offset > 0 || clientY > window.innerHeight) {\r\n      const newTop = currentTop + this.getScrollStep(offset)\r\n      this.scrollContainer!.scrollTop = Math.min(newTop, this.maxScrollTop)\r\n    }\r\n  }\r\n\r\n  checkScrollLeft = (clientX: number, currentLeft: number) => {\r\n    const offset = this.scrollBounds!.left - clientX\r\n\r\n    if (offset > 0 || clientX < 0) {\r\n      const newLeft = currentLeft - this.getScrollStep(offset)\r\n      this.scrollContainer!.scrollLeft = newLeft\r\n    }\r\n  }\r\n\r\n  checkScrollRight = (clientX: number, currentLeft: number) => {\r\n    const offset = clientX - this.scrollBounds!.right\r\n\r\n    if (offset > 0 || clientX > window.innerWidth) {\r\n      const newLeft = currentLeft + this.getScrollStep(offset)\r\n      this.scrollContainer!.scrollLeft = Math.min(newLeft, this.maxScrollLeft)\r\n    }\r\n  }\r\n\r\n  updateSelectBox = (event: Event) => {\r\n    const evt = castTouchToMouseEvent(event)\r\n    this.updateContainerScroll(evt as MouseEvent<HTMLElement>)\r\n\r\n    if (this.mouseMoveStarted) {\r\n      return\r\n    }\r\n    this.mouseMoveStarted = true\r\n    this.mouseMoved = true\r\n\r\n    const { mouseDownData } = this\r\n    const { clientX, clientY } = evt\r\n    const { scrollLeft, scrollTop } = this.scrollContainer!\r\n\r\n    const pointY = clientY - this.scrollBounds!.top + scrollTop\r\n    const selectboxY = Math.min(pointY, mouseDownData.selectboxY)\r\n\r\n    const pointX = clientX - this.scrollBounds!.left + scrollLeft\r\n    const selectboxX = Math.min(pointX, mouseDownData.selectboxX)\r\n\r\n    this.selectbox!.setState(\r\n      {\r\n        x: selectboxX,\r\n        y: selectboxY,\r\n        isSelecting: true,\r\n        width: Math.abs(pointX - mouseDownData.selectboxX),\r\n        height: Math.abs(pointY - mouseDownData.selectboxY)\r\n      },\r\n      () => {\r\n        this.updateSelecting()\r\n        this.props.duringSelection!([...this.selectingItems])\r\n        this.mouseMoveStarted = false\r\n      }\r\n    )\r\n  }\r\n\r\n  updateSelecting = () => {\r\n    const selectboxNode = this.selectbox!.getRef()\r\n    if (!selectboxNode) {\r\n      return\r\n    }\r\n\r\n    const selectboxBounds = getBoundsForNode(selectboxNode)\r\n\r\n    this.selectItems({\r\n      ...selectboxBounds[0],\r\n      offsetWidth: selectboxBounds[0].offsetWidth || 1,\r\n      offsetHeight: selectboxBounds[0].offsetHeight || 1\r\n    })\r\n  }\r\n\r\n  selectItems = (selectboxBounds: TComputedBounds, options: TSelectItemsOptions = {}) => {\r\n    const { tolerance, enableDeselect, mixedDeselect } = this.props\r\n\r\n    selectboxBounds.top += this.scrollContainer!.scrollTop\r\n    selectboxBounds.left += this.scrollContainer!.scrollLeft\r\n\r\n    for (const item of this.registry.values()) {\r\n      this.processItem({\r\n        item,\r\n        selectboxBounds,\r\n        tolerance: tolerance!,\r\n        mixedDeselect: mixedDeselect!,\r\n        enableDeselect: enableDeselect!,\r\n        isFromClick: options && options.isFromClick\r\n      })\r\n    }\r\n  }\r\n\r\n  processItem(options: TProcessItemOptions) {\r\n    const { item, tolerance, selectboxBounds, enableDeselect, mixedDeselect, isFromClick } = options\r\n\r\n    if (this.isInIgnoreList(item.node)) {\r\n      return null\r\n    }\r\n\r\n    let isCollided = false;\r\n    for (let i = 0; i < item.bounds.length; i+=1) {\r\n        isCollided = doObjectsCollide(selectboxBounds, item.bounds[i], tolerance, this.props.delta);\r\n    }\r\n    const { isSelecting, isSelected } = item.state\r\n\r\n    if (isFromClick && isCollided) {\r\n      if (isSelected) {\r\n        this.selectedItems.delete(item)\r\n      } else {\r\n        this.selectedItems.add(item)\r\n      }\r\n\r\n      item.setState({ isSelected: !isSelected })\r\n\r\n      return (this.clickedItem = item)\r\n    }\r\n\r\n    if (!isFromClick && isCollided) {\r\n      if (isSelected && enableDeselect && (!this.selectionStarted || mixedDeselect)) {\r\n        item.setState({ isSelected: false })\r\n        item.deselected = true\r\n\r\n        this.deselectionStarted = true\r\n\r\n        return this.selectedItems.delete(item)\r\n      }\r\n\r\n      const canSelect = mixedDeselect ? !item.deselected : !this.deselectionStarted\r\n\r\n      if (!isSelecting && !isSelected && canSelect) {\r\n        item.setState({ isSelecting: true })\r\n\r\n        this.selectionStarted = true\r\n        this.selectingItems.add(item)\r\n\r\n        return { updateSelecting: true }\r\n      }\r\n    }\r\n\r\n    if (!isFromClick && !isCollided && isSelecting) {\r\n      if (this.selectingItems.has(item)) {\r\n        item.setState({ isSelecting: false })\r\n\r\n        this.selectingItems.delete(item)\r\n\r\n        return { updateSelecting: true }\r\n      }\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  clearSelection = () => {\r\n    for (const item of this.selectedItems.values()) {\r\n      item.setState({ isSelected: false })\r\n      this.selectedItems.delete(item)\r\n    }\r\n\r\n    this.setState({ selectionMode: false })\r\n    this.props.onSelectionFinish!([...this.selectedItems])\r\n    this.props.onSelectionClear!()\r\n  }\r\n\r\n  selectAll = () => {\r\n    this.updateWhiteListNodes()\r\n\r\n    for (const item of this.registry.values()) {\r\n      if (!this.isInIgnoreList(item.node) && !item.state.isSelected) {\r\n        item.setState({ isSelected: true })\r\n        this.selectedItems.add(item)\r\n      }\r\n    }\r\n\r\n    this.setState({ selectionMode: true })\r\n    this.props.onSelectionFinish!([...this.selectedItems])\r\n  }\r\n\r\n  isInIgnoreList(target: HTMLElement | null) {\r\n    if (!target) {\r\n      return\r\n    }\r\n\r\n    if (this.ignoreCheckCache.get(target) !== undefined) {\r\n      return this.ignoreCheckCache.get(target)\r\n    }\r\n\r\n    const shouldBeIgnored = this.ignoreListNodes.some(\r\n      ignoredNode => target === ignoredNode || ignoredNode.contains(target)\r\n    )\r\n\r\n    this.ignoreCheckCache.set(target, shouldBeIgnored)\r\n\r\n    return shouldBeIgnored\r\n  }\r\n\r\n  updateWhiteListNodes() {\r\n    this.ignoreListNodes = Array.from(document.querySelectorAll(this.ignoreList.join(', ')))\r\n  }\r\n\r\n  mouseDown = (e: Event) => {\r\n    const isNotLeftButtonClick =\r\n      !e.type.includes('touch') &&\r\n      !detectMouseButton(e as any, 1, {\r\n        allowAltClick: this.props.allowAltClick,\r\n        allowCtrlClick: this.props.allowCtrlClick,\r\n        allowMetaClick: this.props.allowMetaClick,\r\n        allowShiftClick: this.props.allowShiftClick\r\n      })\r\n    if (this.mouseDownStarted || this.props.disabled || isNotLeftButtonClick) {\r\n      return\r\n    }\r\n\r\n    this.updateWhiteListNodes()\r\n\r\n    if (this.isInIgnoreList(e.target as HTMLElement)) {\r\n      this.mouseDownStarted = false\r\n\r\n      return\r\n    }\r\n\r\n    if (this.props.resetOnStart) {\r\n      this.clearSelection()\r\n    }\r\n    this.mouseDownStarted = true\r\n    this.mouseUpStarted = false\r\n    const evt = castTouchToMouseEvent(e)\r\n\r\n    if (!this.props.globalMouse && !isNodeInRoot(evt.target as any, this.selectableGroup!)) {\r\n      const offsetData = getBoundsForNode(this.selectableGroup!)\r\n      const collides = doObjectsCollide(\r\n        {\r\n          top: offsetData[0].top,\r\n          left: offsetData[0].left,\r\n          width: 0,\r\n          height: 0,\r\n          offsetHeight: offsetData[0].offsetHeight,\r\n          offsetWidth: offsetData[0].offsetWidth\r\n        },\r\n        {\r\n          top: evt.pageY,\r\n          left: evt.pageX,\r\n          width: 0,\r\n          height: 0,\r\n          offsetWidth: 0,\r\n          offsetHeight: 0\r\n        }\r\n      )\r\n\r\n      if (!collides) {\r\n        return\r\n      }\r\n    }\r\n\r\n    this.updateRootBounds()\r\n    this.updateRegistry()\r\n\r\n    this.mouseDownData = {\r\n      target: evt.target as HTMLElement,\r\n      selectboxY: evt.clientY - this.scrollBounds!.top + this.scrollContainer!.scrollTop,\r\n      selectboxX: evt.clientX - this.scrollBounds!.left + this.scrollContainer!.scrollLeft\r\n    }\r\n\r\n    evt.preventDefault()\r\n\r\n    document.addEventListener('mousemove', this.updateSelectBox)\r\n    document.addEventListener('touchmove', this.updateSelectBox)\r\n    document.addEventListener('mouseup', this.mouseUp)\r\n    document.addEventListener('touchend', this.mouseUp)\r\n  }\r\n\r\n  preventEvent(target: HTMLElement, type: string) {\r\n    const preventHandler = (evt: Event) => {\r\n      target.removeEventListener(type, preventHandler, true)\r\n      evt.preventDefault()\r\n      evt.stopPropagation()\r\n    }\r\n    target.addEventListener(type, preventHandler, true)\r\n  }\r\n\r\n  private mouseUp = (event: Event) => {\r\n    if (this.mouseUpStarted) {\r\n      return\r\n    }\r\n\r\n    this.mouseUpStarted = true\r\n    this.mouseDownStarted = false\r\n    this.removeTempEventListeners()\r\n\r\n    if (!this.mouseDownData) {\r\n      return\r\n    }\r\n\r\n    const evt: any = castTouchToMouseEvent(event)\r\n    const { pageX, pageY } = evt\r\n\r\n    if (!this.mouseMoved && isNodeInRoot(evt.target as HTMLElement, this.selectableGroup!)) {\r\n      this.handleClick(evt, pageY, pageX)\r\n    } else {\r\n      for (const item of this.selectingItems.values()) {\r\n        item.setState({ isSelected: true, isSelecting: false })\r\n      }\r\n      this.selectedItems = new Set([...this.selectedItems, ...this.selectingItems])\r\n      this.selectingItems.clear()\r\n\r\n      if (evt.which === 1 && this.mouseDownData.target === evt.target) {\r\n        this.preventEvent(evt.target, 'click')\r\n      }\r\n\r\n      this.selectbox!.setState({\r\n        isSelecting: false,\r\n        width: 0,\r\n        height: 0\r\n      })\r\n      this.props.onSelectionFinish!([...this.selectedItems])\r\n    }\r\n\r\n    this.toggleSelectionMode()\r\n    this.cleanUp()\r\n    this.mouseMoved = false\r\n  }\r\n\r\n  handleClick(evt: any, top: number, left: number) {\r\n    if (!this.props.selectOnClick) {\r\n      return\r\n    }\r\n\r\n    const { clickClassName, allowClickWithoutSelected, onSelectionFinish } = this.props\r\n    const classNames = (evt.target as HTMLElement).classList || []\r\n    const isMouseUpOnClickElement = Array.from(classNames).indexOf(clickClassName!) > -1\r\n\r\n    if (\r\n      allowClickWithoutSelected ||\r\n      this.selectedItems.size ||\r\n      isMouseUpOnClickElement ||\r\n      evt.ctrlKey\r\n    ) {\r\n      this.selectItems(\r\n        {\r\n          top,\r\n          left,\r\n          width: 0,\r\n          height: 0,\r\n          offsetWidth: 0,\r\n          offsetHeight: 0\r\n        },\r\n        { isFromClick: true }\r\n      )\r\n\r\n      onSelectionFinish!([...this.selectedItems], this.clickedItem)\r\n\r\n      if (evt.which === 1) {\r\n        this.preventEvent(evt.target, 'click')\r\n      }\r\n      if (evt.which === 2 || evt.which === 3) {\r\n        this.preventEvent(evt.target, 'contextmenu')\r\n      }\r\n    }\r\n  }\r\n\r\n  keyListener = (evt: KeyboardEvent) => {\r\n    if (evt.keyCode === 27) {\r\n      // escape\r\n      this.clearSelection()\r\n    }\r\n  }\r\n\r\n  cleanUp() {\r\n    this.deselectionStarted = false\r\n    this.selectionStarted = false\r\n\r\n    if (this.props.mixedDeselect) {\r\n      for (const item of this.registry.values()) {\r\n        item.deselected = false\r\n      }\r\n    }\r\n  }\r\n\r\n  getGroupRef = (ref: HTMLElement | null) => {\r\n    this.selectableGroup = ref\r\n  }\r\n\r\n  getSelectboxRef = (ref: Selectbox | null) => {\r\n    this.selectbox = ref\r\n  }\r\n\r\n  defaultContainerStyle = {\r\n    position: 'relative'\r\n  }\r\n\r\n  contextValue = {\r\n    selectable: {\r\n      register: this.registerSelectable,\r\n      unregister: this.unregisterSelectable,\r\n      selectAll: this.selectAll,\r\n      clearSelection: this.clearSelection,\r\n      getScrolledContainer: () => this.scrollContainer\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { selectionMode } = this.state\r\n    const {\r\n      component: GroupComponent = 'div',\r\n      className,\r\n      style,\r\n      selectionModeClass,\r\n      fixedPosition,\r\n      selectboxClassName,\r\n      children\r\n    } = this.props\r\n\r\n    return (\r\n      <SelectableGroupContext.Provider value={this.contextValue}>\r\n        <GroupComponent\r\n          ref={this.getGroupRef}\r\n          style={Object.assign({}, this.defaultContainerStyle, style)}\r\n          className={`${className} ${selectionMode ? selectionModeClass : ''}`}\r\n        >\r\n          <Selectbox\r\n            ref={this.getSelectboxRef}\r\n            className={selectboxClassName}\r\n            fixedPosition={fixedPosition!}\r\n          />\r\n          {children}\r\n        </GroupComponent>\r\n      </SelectableGroupContext.Provider>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SelectableGroup\r\n","import React, { Component, ComponentType } from 'react'\r\nimport { bool } from 'prop-types'\r\n\r\nimport { getBoundsForNode, TComputedBounds, TGetBoundsForNodeArgs } from './utils'\r\nimport { TSelectableItemState } from './Selectable.types'\r\nimport SelectableGroupContext from './Context'\r\n\r\nconst createSelectable = (WrappedComponent: ComponentType<any>) =>\r\n  class SelectableItem extends Component<any, TSelectableItemState> {\r\n    static contextType = SelectableGroupContext\r\n\r\n    static propTypes = {\r\n      isSelected: bool\r\n    }\r\n\r\n    static defaultProps = {\r\n      isSelected: false\r\n    }\r\n\r\n    state = {\r\n      isSelected: this.props.isSelected,\r\n      isSelecting: false\r\n    }\r\n\r\n    node: HTMLElement | null = null\r\n    bounds: TComputedBounds | null = null\r\n\r\n    componentDidMount() {\r\n      this.registerSelectable()\r\n    }\r\n\r\n    componentWillUnmount() {\r\n      this.context.selectable.unregister(this)\r\n    }\r\n\r\n    registerSelectable = (containerScroll?: TGetBoundsForNodeArgs) => {\r\n      this.bounds = getBoundsForNode(this.node!, containerScroll)\r\n      this.context.selectable.register(this)\r\n    }\r\n\r\n    getSelectableRef = (ref: HTMLElement | null) => {\r\n      this.node = ref\r\n    }\r\n\r\n    render() {\r\n      return (\r\n        <WrappedComponent {...this.props} {...this.state} selectableRef={this.getSelectableRef} />\r\n      )\r\n    }\r\n  }\r\n\r\nexport default createSelectable\r\n","import React, { Component, ReactNode } from 'react'\r\nimport { ReactComponentLike } from 'prop-types'\r\n\r\nimport SelectableGroupContext from './Context'\r\n\r\ntype TSelectAllButton = {\r\n  children: ReactNode\r\n  component?: ReactComponentLike\r\n  className?: string\r\n  [key: string]: any\r\n}\r\n\r\nclass SelectAllButton extends Component<TSelectAllButton> {\r\n  static contextType = SelectableGroupContext\r\n\r\n  root: HTMLDivElement | null = null\r\n\r\n  componentDidMount() {\r\n    this.root!.addEventListener('mousedown', (evt: Event) => evt.stopPropagation())\r\n  }\r\n\r\n  getRootRef = (ref: HTMLDivElement | null) => {\r\n    this.root = ref\r\n  }\r\n\r\n  render() {\r\n    const { component: ButtonComponent = 'div', children, className = '', ...rest } = this.props\r\n\r\n    return (\r\n      <ButtonComponent\r\n        ref={this.getRootRef}\r\n        className={`selectable-select-all ${className}`}\r\n        onClick={this.context.selectable.selectAll}\r\n        {...rest}\r\n      >\r\n        {children}\r\n      </ButtonComponent>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SelectAllButton\r\n","import React, { Component, ReactNode } from 'react'\r\nimport { ReactComponentLike } from 'prop-types'\r\n\r\nimport SelectableGroupContext from './Context'\r\n\r\ntype TDeselectAllButton = {\r\n  children: ReactNode\r\n  component?: ReactComponentLike\r\n  className?: string\r\n  [key: string]: any\r\n}\r\n\r\nclass DeselectAllButton extends Component<TDeselectAllButton> {\r\n  static contextType = SelectableGroupContext\r\n\r\n  root: HTMLDivElement | null = null\r\n\r\n  componentDidMount() {\r\n    this.root!.addEventListener('mousedown', (evt: Event) => evt.stopPropagation())\r\n  }\r\n\r\n  getRootRef = (ref: HTMLDivElement | null) => {\r\n    this.root = ref\r\n  }\r\n\r\n  render() {\r\n    const { component: ButtonComponent = 'div', children, className, ...rest } = this.props\r\n\r\n    return (\r\n      <ButtonComponent\r\n        ref={this.getRootRef}\r\n        className={`selectable-select-all ${className}`}\r\n        onClick={this.context.selectable.clearSelection}\r\n        {...rest}\r\n      >\r\n        {children}\r\n      </ButtonComponent>\r\n    )\r\n  }\r\n}\r\n\r\nexport default DeselectAllButton\r\n","import SelectableGroup from './SelectableGroup'\r\nimport createSelectable from './CreateSelectable'\r\nimport SelectAll from './SelectAll'\r\nimport DeselectAll from './DeselectAll'\r\nimport { TSelectableItemProps } from './Selectable.types'\r\n\r\n// As early as possible, check for the existence of the JavaScript globals which\r\n// package Runtime relies upon, and produce a clear message if they do not exist.\r\nif (process.env.NODE_ENV === 'development') {\r\n  if (\r\n    typeof Map !== 'function' ||\r\n    typeof Set !== 'function' ||\r\n    typeof Array.from !== 'function' ||\r\n    typeof Array.isArray !== 'function' ||\r\n    typeof Object.assign !== 'function'\r\n  ) {\r\n    throw new Error(`\r\n      React-Selectable-Fast requires Map, Set, Array.from,\r\n      Array.isArray, and Object.assign to exist.\r\n      Use a polyfill to provide these for older browsers.\r\n    `)\r\n  }\r\n}\r\n\r\nexport { TSelectableItemProps, SelectableGroup, createSelectable, SelectAll, DeselectAll }\r\n"],"sourceRoot":""}